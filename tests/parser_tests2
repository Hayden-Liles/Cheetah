#[allow(dead_code)]
#[cfg(test)]
mod advanced_parser_tests {
    use cheetah::ast::Module;
    use cheetah::lexer::Lexer;
    use cheetah::parser::{ParseError, Parser};
    use std::fmt;
    // Custom formatter for error types
    struct ErrorFormatter<'a>(pub &'a ParseError);

    impl<'a> fmt::Display for ErrorFormatter<'a> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            match self.0 {
                ParseError::UnexpectedToken { expected, found, line, column } => {
                    write!(f, "Unexpected token at line {}, column {}: expected '{}', found '{:?}'", 
                           line, column, expected, found)
                },
                ParseError::InvalidSyntax { message, line, column } => {
                    write!(f, "Invalid syntax at line {}, column {}: {}", 
                           line, column, message)
                },
                ParseError::EOF { expected, line, column } => {
                    write!(f, "Unexpected EOF at line {}, column {}: expected '{}'", 
                           line, column, expected)
                },
            }
        }
    }

    // Helper functions to test parsing, similar to the ones in temp_tests.rs
    fn check_error_quality(source: &str) -> String {
        match parse_code(source) {
            Ok(_) => {
                panic!("Expected parsing to fail, but it succeeded: {}", source);
            },
            Err(errors) => {
                assert!(!errors.is_empty(), "Expected at least one error to be reported");
                let error_message = format!("{}", ErrorFormatter(&errors[0]));
                
                // Verify that error message contains useful information
                assert!(!error_message.is_empty(), "Error message should not be empty");
                assert!(error_message.contains("line"), "Error message should contain line number");
                assert!(error_message.contains("column"), "Error message should contain column number");
                
                error_message
            },
        }
    }

    fn parse_code(source: &str) -> Result<Module, Vec<ParseError>> {
        let mut lexer = Lexer::new(source);
        let tokens = lexer.tokenize();

        if !lexer.get_errors().is_empty() {
            let parse_errors: Vec<ParseError> = lexer
                .get_errors()
                .iter()
                .map(|e| ParseError::InvalidSyntax {
                    message: e.message.clone(),
                    line: e.line,
                    column: e.column,
                })
                .collect();
            return Err(parse_errors);
        }

        let mut parser = Parser::new(tokens);
        parser.parse()
    }

    fn assert_parses(source: &str) -> Module {
        match parse_code(source) {
            Ok(module) => module,
            Err(errors) => {
                println!("\n================================");
                println!("PARSING FAILED FOR CODE SNIPPET:");
                println!("================================");
                println!("{}", source);
                println!("\nERRORS:");
                
                for error in &errors {
                    // Print detailed error information
                    println!("- {}", ErrorFormatter(error));
                }
                
                panic!("Parsing failed with {} errors", errors.len());
            },
        }
    }

    fn assert_parse_fails(source: &str) {
        match parse_code(source) {
            Ok(_) => {
                println!("\n=============================");
                println!("EXPECTED FAILURE BUT SUCCEEDED:");
                println!("=============================");
                println!("{}", source);
                panic!("Expected parsing to fail, but it succeeded");
            },
            Err(_) => (), // Pass if there's any error
        }
    }

    fn assert_parse_fails_with(source: &str, expected_error_substr: &str) {
        match parse_code(source) {
            Ok(_) => {
                println!("\n=============================");
                println!("EXPECTED FAILURE BUT SUCCEEDED:");
                println!("=============================");
                println!("{}", source);
                println!("\nExpected error containing: '{}'", expected_error_substr);
                panic!("Expected parsing to fail, but it succeeded");
            },
            Err(errors) => {
                let error_message = format!("{}", ErrorFormatter(&errors[0]));
                if !error_message.contains(expected_error_substr) {
                    println!("\n==========================");
                    println!("WRONG ERROR TYPE DETECTED:");
                    println!("==========================");
                    println!("Code: {}", source);
                    println!("\nExpected error containing: '{}'", expected_error_substr);
                    println!("Actual error: '{}'", error_message);
                    
                    panic!("Error message doesn't match expected substring");
                }
            },
        }
    }

    // 1. LEXICAL EDGE CASES
    mod lexical_edge_cases {
        use super::*;

        #[test]
        fn test_unicode_escape_in_strings() {
            // Unicode escape sequences
            assert_parses(r#"x = "\u0061\u0062\u0063""#); // Should parse as "abc"
            assert_parses(r#"x = "\N{GREEK SMALL LETTER ALPHA}""#); // Named character
            assert_parses(r#"x = "\U0001F600""#); // Emoji escape (😀)
        }

        #[test]
        fn test_numeric_literal_bases() {
            // Binary literals
            assert_parses("x = 0b1010");
            assert_parses("x = 0B1110");
            
            // Octal literals
            assert_parses("x = 0o755");
            assert_parses("x = 0O123");
            
            // Hexadecimal literals
            assert_parses("x = 0xFADE");
            assert_parses("x = 0Xbeef");
            
            // Mixed in expressions
            assert_parses("x = 0b1010 + 0o777 + 0xFF");
        }

        #[test]
        fn test_numeric_literal_with_underscores() {
            // Decimal with underscores
            assert_parses("x = 1_000_000");
            assert_parses("x = 1_2_3_4_5");
            
            // Binary with underscores
            assert_parses("x = 0b1101_0101");
            
            // Hex with underscores
            assert_parses("x = 0xFFFF_FFFF");
            
            // Float with underscores
            assert_parses("x = 3.14_15_92_65");
            assert_parses("x = 1_2.3_4e5_6");
        }

        #[test]
        fn test_complex_number_literals() {
            // Basic complex numbers
            assert_parses("x = 1j");
            assert_parses("x = 3.14j");
            
            // Complex numbers with operations
            assert_parses("x = 1+2j");
            assert_parses("x = 3.14-2.718j");
            
            // Complex expressions
            assert_parses("x = (1+2j) * (3-4j)");
            assert_parses("x = abs(1+2j)");
        }

        #[test]
        fn test_string_literals() {
            // Raw strings
            assert_parses(r#"x = r"raw\nstring""#);
            assert_parses(r#"x = R'another\traw'"#);
            
            // Bytes literals
            assert_parses(r#"x = b"bytes\x00data""#);
            assert_parses(r#"x = B'more\tdata'"#);
            
            // Raw bytes
            assert_parses(r#"x = rb"raw bytes""#);
            assert_parses(r#"x = BR'more raw bytes'"#);
            
            // Triple-quoted strings
            assert_parses(r#"x = """Triple quoted
                              multiline
                              string"""
            "#);
            
            // Triple-quoted raw strings
            assert_parses(r#"x = r"""Raw triple quoted
                              \n doesn't interpret escapes
                              string"""
            "#);
        }

        #[test]
        fn test_extreme_literals() {
            // Very large integers
            assert_parses("x = 10000000000000000000000000000000000000000");
            
            // Very small/large floats
            assert_parses("x = 1.234e-308");
            assert_parses("x = 1.234e+308");
            
            // Extreme complex numbers
            assert_parses("x = 1.23e+100+4.56e-100j");
            
            // Long hex/bin/oct literals
            assert_parses(&("x = 0b".to_owned() + &"1".repeat(64)));
            assert_parses(&("x = 0x".to_owned() + &"F".repeat(32)));
        }
    }

    // 2. PYTHON-SPECIFIC SYNTAX FEATURES
    mod python_specific_features {
        use super::*;

        #[test]
        fn test_matrix_multiplication() {
            // Basic matrix multiplication
            assert_parses("result = matrix1 @ matrix2");
            
            // Matrix multiplication with other operators
            assert_parses("result = (A @ B) + (C @ D)");
            
            // Augmented matrix multiplication
            assert_parses("matrix1 @= matrix2");
            
            // Matrix multiplication in complex expressions
            assert_parses("result = matrix1.transpose() @ (matrix2 @ vector)");
        }

        #[test]
        fn test_union_types() {
            // Basic union type (Python 3.10+)
            assert_parses("def func(param: int | str): pass");
            
            // Union with None (Optional)
            assert_parses("x: str | None = None");
            
            // Multiple types in union
            assert_parses("def process(data: int | float | str | list | dict): pass");
            
            // Nested unions
            assert_parses("def func(x: dict[str, list[int | float]]): pass");
        }

        #[test]
        fn test_type_comments() {
            // Basic type comments
            assert_parses("x = []  # type: list[int]");
            
            // Function type comments
            assert_parses("def func(a, b):  # type: (int, str) -> bool\n    pass");
            
            // Variable with complex type comment
            assert_parses("data = {}  # type: dict[str, list[tuple[int, float]]]");
            
            // Multiple type comments
            assert_parses(r#"
x = 1  # type: int
y = ""  # type: str
z = []  # type: list[Any]
            "#);
        }

        #[test]
        fn test_structural_pattern_matching() {
            // Basic match-case
            assert_parses(r#"
match value:
    case 1:
        print("one")
    case 2:
        print("two")
    case _:
        print("other")
            "#);
            
            // Pattern matching with destructuring
            assert_parses(r#"
match point:
    case (0, 0):
        print("Origin")
    case (0, y):
        print(f"Y-axis at {y}")
    case (x, 0):
        print(f"X-axis at {x}")
    case (x, y):
        print(f"Point at ({x}, {y})")
            "#);
            
            // Pattern matching with class patterns
            assert_parses(r#"
match shape:
    case Circle(radius=r):
        print(f"Circle with radius {r}")
    case Rectangle(width=w, height=h):
        print(f"Rectangle {w}x{h}")
    case _:
        print("Unknown shape")
            "#);
            
            // Complex patterns with nested destructuring
            assert_parses(r#"
match data:
    case {"point": (x, y), "color": color}:
        print(f"Colored point at ({x}, {y}) with color {color}")
    case {"point": [x, y], "color": {"r": r, "g": g, "b": b}}:
        print(f"RGB point at ({x}, {y}) with color ({r}, {g}, {b})")
    case _:
        print("Unknown data format")
            "#);
            
            // Match with OR patterns
            assert_parses(r#"
match command:
    case "quit" | "exit" | "bye":
        return
    case "help" | "?":
        show_help()
    case _:
        process(command)
            "#);
            
            // Match with guards
            assert_parses(r#"
match num:
    case n if n < 0:
        print("Negative")
    case n if n % 2 == 0:
        print("Even positive")
    case n:
        print("Odd positive")
            "#);
            
            // Match with wildcard patterns
            assert_parses(r#"
match data:
    case [_]:
        print("Single item list")
    case [_, _]:
        print("Two item list")
    case [_, *rest]:
        print(f"List with {len(rest) + 1} items")
            "#);
        }

        #[test]
        fn test_fstrings_advanced() {
            // Basic f-strings
            assert_parses(r#"f"Hello, {name}!""#);
            
            // F-strings with format specifiers
            assert_parses(r#"f"Value: {value:.2f}""#);
            assert_parses(r#"f"Hex: {value:#x}, Bin: {value:#b}""#);
            
            // F-strings with expressions
            assert_parses(r#"f"Result: {2 + 2 * 10}""#);
            assert_parses(r#"f"Calculated: {calculate(a, b=c)}""#);
            
            // F-strings with self-documenting expressions (Python 3.8+)
            assert_parses(r#"f"{x=}, {y=}, {z=}""#);
            assert_parses(r#"f"{x=:.2f}, {y=:>10}""#);
            
            // Nested f-strings
            assert_parses(r#"f"Nested: {f'Inner: {value}'}""#);
            
            // F-string with conversion flags
            assert_parses(r#"f"Debug: {obj!r}, String: {obj!s}, ASCII: {obj!a}""#);
            
            // F-string with complex expressions
            assert_parses(r#"f"Complex: {(lambda x: x**2)(3)}""#);
            assert_parses(r#"f"Dict access: {data['key']}""#);
        }

        #[test]
        fn test_extended_unpacking() {
            // List/tuple unpacking with star
            assert_parses("a, *b, c = [1, 2, 3, 4, 5]");
            assert_parses("first, *middle, last = range(10)");
            
            // Multiple stars in assignment (disallowed in Python, but worth testing)
            assert_parse_fails("*a, *b = range(10)");
            
            // Starred in list/tuple literals
            assert_parses("combined = [1, 2, *more_items, 3, 4]");
            assert_parses("combined = (1, 2, *more_items, 3, 4)");
            
            // Nested unpacking
            assert_parses("((a, *b), (*c, d)) = ((1, 2, 3), (4, 5, 6))");
            
            // Dictionary unpacking
            assert_parses("combined = {**dict1, **dict2, 'key': 'value'}");
            
            // Mixed unpacking in function calls
            assert_parses("result = func(1, 2, *args, key1=val1, **kwargs)");
        }
    }

    // 3. ADVANCED SYNTAX TESTS
    mod advanced_syntax_tests {
        use super::*;

        #[test]
        fn test_trailing_commas() {
            // Trailing commas in various contexts
            assert_parses("x = (1, 2, 3,)");
            assert_parses("x = [1, 2, 3,]");
            assert_parses("x = {1, 2, 3,}");
            assert_parses("x = {'a': 1, 'b': 2,}");
            
            // Function call with trailing comma
            assert_parses("func(a, b, c,)");
            
            // Function definition with trailing comma
            assert_parses("def func(a, b, c,): pass");
            
            // Import with trailing comma
            assert_parses("from module import a, b, c,");
            
            // Multiple trailing commas (should fail)
            assert_parse_fails("x = (1, 2, 3,,)");
            assert_parse_fails("func(a, b,,)");
        }

        #[test]
        fn test_advanced_decorators() {
            // Decorators with expressions
            assert_parses("@decorator(param=value)\ndef func(): pass");
            
            // Nested decorators
            assert_parses("@outer(inner())\ndef func(): pass");
            
            // Decorators with attribute access
            assert_parses("@module.decorator\ndef func(): pass");
            
            // Multiple decorators with varying complexity
            assert_parses(r#"
@simple
@complex(a, b, c=d)
@module.decorator.method()
@lambda_deco(lambda x: x*2)
def complex_func():
    pass
            "#);
            
            // Class decorators
            assert_parses(r#"
@register
@dataclass(frozen=True)
class Point:
    x: float
    y: float
            "#);
            
            // Decorators with extreme expressions
            assert_parses(r#"
@(lambda f: lambda *args, **kwargs: f(*args, **kwargs))
def func():
    pass
            "#);
        }

        #[test]
        fn test_nested_function_definitions() {
            // Deeply nested functions
            assert_parses(r#"
def level1():
    def level2():
        def level3():
            def level4():
                def level5():
                    return 42
                return level5()
            return level4()
        return level3()
    return level2()
            "#);
            
            // Closures with nonlocal
            assert_parses(r#"
def counter():
    x = 0
    def increment():
        nonlocal x
        x += 1
        return x
    return increment
            "#);
            
            // Recursive function definitions
            assert_parses(r#"
def outer(n):
    if n <= 0:
        return lambda x: x
    else:
        return lambda x: outer(n-1)(x) + 1
            "#);
            
            // Function factories
            assert_parses(r#"
def make_adder(n):
    def add(x):
        return x + n
    return add

add5 = make_adder(5)
            "#);
        }

        #[test]
        fn test_context_manager_edge_cases() {
            // Context manager with multiple targets
            assert_parses(r#"
with open('file1.txt') as f1, open('file2.txt') as f2:
    process(f1, f2)
            "#);
            
            // Deeply nested context managers
            assert_parses(r#"
with cm1:
    with cm2:
        with cm3:
            with cm4:
                with cm5:
                    process()
            "#);
            
            // Context manager with tuple target
            assert_parses(r#"
with connection_factory() as (conn, cursor):
    cursor.execute(query)
            "#);
            
            // Async context managers
            assert_parses(r#"
async def process():
    async with lock1:
        async with lock2:
            await task()
            "#);
            
            // Context manager with expressions
            assert_parses(r#"
with open(get_filename(), mode='w' if overwrite else 'a') as f:
    f.write(data)
            "#);
        }

        #[test]
        fn test_generator_functions() {
            // Simple generator
            assert_parses(r#"
def gen():
    yield 1
    yield 2
    yield 3
            "#);
            
            // Generator with yield from
            assert_parses(r#"
def combined():
    yield from gen1()
    yield from gen2()
            "#);
            
            // Async generator
            assert_parses(r#"
async def agen():
    async for item in source():
        yield item
            "#);
            
            // Generator with send/return value handling
            assert_parses(r#"
def echo():
    received = yield 'Ready'
    while True:
        received = yield received
            "#);
            
            // Complex generator with conditionals
            assert_parses(r#"
def filtered_gen(predicate):
    for item in source():
        if predicate(item):
            yield item
            "#);
        }

        #[test]
        fn test_annotation_corner_cases() {
            // Forward references in quotes
            assert_parses(r#"
class Node:
    next: 'Node'
    prev: 'Optional[Node]'
            "#);
            
            // Complex nested type annotations
            assert_parses(r#"
def process(data: Dict[str, List[Tuple[int, Dict[str, Any]]]]) -> Iterator[Result]:
    pass
            "#);
            
            // Type annotations with ellipsis
            assert_parses(r#"
class Array:
    def __getitem__(self, index: Union[int, slice, Tuple[...]], /): pass
            "#);
            
            // Callable type annotations
            assert_parses(r#"
handler: Callable[[int, str], Optional[bool]] = process
            "#);
            
            // Variable annotations with complex expressions
            assert_parses(r#"
answer: Final[int] = 2 * 3 * 7
            "#);
        }
    }

    // 4. ERROR RECOVERY AND QUALITY TESTS
    mod error_tests {
        use super::*;

        #[test]
        fn test_multiple_error_reporting() {
            // Multiple syntax errors in a single file
            let source = r#"
def func(x y): # Missing comma
    retrun x + y # Typo in return
        
for in range(10): # Missing target
    print(i)
            "#;
            
            let result = parse_code(source);
            assert!(result.is_err(), "Parsing should fail");
            
            // Note: Currently we only check for the first error,
            // but in a more advanced parser we might check that multiple errors are reported
            if let Err(errors) = result {
                assert!(!errors.is_empty(), "At least one error should be reported");
                // You could extend this to check for multiple errors if supported
            }
        }

        #[test]
        fn test_syntax_error_suggestions() {
            // Assignment in condition (common mistake)
            let error = check_error_quality("if x = 5: pass");
            
            // We're not checking for specific suggestions yet, but at least we should get a clear error
            assert!(!error.is_empty(), "Error message should exist");
            
            // Missing : after if
            let error = check_error_quality("if x > 5 pass");
            assert!(!error.is_empty(), "Error message should exist");
            
            // Using == instead of = in assignment
            let error = check_error_quality("x == 5");
            assert!(!error.is_empty(), "Error message should exist");
        }

        #[test]
        fn test_error_position_accuracy() {
            // Error in function call
            let error = check_error_quality("func(a, b, , c)");
            assert!(!error.is_empty(), "Error should be reported for extra comma");
            
            // Error in nested expression
            let error = check_error_quality("f(g(1, h(2, ), 3))");
            assert!(!error.is_empty(), "Error should be reported for extra comma");
            
            // Error inside f-string
            let error = check_error_quality("f\"Value: {1 + * 2}\"");
            assert!(!error.is_empty(), "Error should be reported for invalid expression in f-string");
            
            // Error in keyword argument
            let error = check_error_quality("func(a, b, c=)");
            assert!(!error.is_empty(), "Error should be reported for missing keyword value");
        }

        #[test]
        fn test_error_recovery_capabilities() {
            // This is more of a test for the parser's error recovery capabilities
            let source = r#"
def func():
    if x > 5:
        return x
    ele:  # Typo in else
        return 0
    
y = 10
            "#;
            
            // Check we get an error but don't crash
            assert_parse_fails(source);
            
            // Check we get correct error locations
            let result = parse_code(source);
            if let Err(errors) = result {
                match &errors[0] {
                    ParseError::UnexpectedToken { line, .. } |
                    ParseError::InvalidSyntax { line, .. } |
                    ParseError::EOF { line, .. } => {
                        // The error should be on the "ele:" line
                        assert_eq!(*line, 5, "Error should be on line 5");
                    }
                }
            }
        }
    }

    // 5. EDGE CASES AND UNUSUAL SYNTAX
    mod edge_cases {
        use super::*;

        #[test]
        fn test_deeply_nested_expressions() {
            // Deeply nested parentheses
            assert_parses("x = (((((((((1))))))))), (((((((((2)))))))))");
            
            // Deeply nested list/dict access
            assert_parses("x = data[0][1][2][3][4][5]['key1']['key2']['key3']");
            
            // Deeply nested function calls
            assert_parses("x = f1(f2(f3(f4(f5(f6(f7(f8(f9(f10(value))))))))))");
            
            // Deeply nested operators
            assert_parses("x = a + (b - (c * (d / (e ** (f % (g | (h & i)))))))");
            
            // Combinations of deep nesting
            assert_parses("x = f1(a[0])[f2(b[1])][f3(c[2](d[3][4]))]");
        }

        #[test]
        fn test_extreme_identifiers() {
            // Long identifier
            assert_parses("very_long_variable_name_that_goes_on_for_a_while_1234567890 = 42");
            
            // Identifier with underscores
            assert_parses("___private_var___ = 42");
            
            // Identifier starting with underscore
            assert_parses("_private = 42");
            
            // Identifier with digits
            assert_parses("var123 = 42");
            
            // Unicode identifiers
            assert_parses("π = 3.14159");
            assert_parses("résumé = 'CV'");
            assert_parses("привет = 'hello'");
            assert_parses("α, β, γ = 1, 2, 3");
        }

        #[test]
        fn test_unusual_syntax_combinations() {
            // Conditional expression in generator expression
            assert_parses("values = (x if x % 2 == 0 else x * 2 for x in range(10))");
            
            // List comprehension with nested lambdas
            assert_parses("funcs = [lambda x, y=i: x + y for i in range(5)]");
            
            // Dictionary with complex expressions as keys/values
            assert_parses("d = {(i, j): lambda x: i*x + j for i in range(3) for j in range(3)}");
            
            // Nested yield statements
            assert_parses("def gen(): yield (yield (yield 1))");
            
            // Walrus operator in complex contexts
            assert_parses("[(x, y, z) for x in range(10) if (y := x**2) > 10 if (z := y**2) > 500]");
        }

        #[test]
        fn test_mixed_tabs_and_spaces() {
            // This test checks how the parser handles mixed tabs and spaces
            // Note: Python itself would reject this code, but the parser might still handle it
            
            // Tabs instead of spaces
            assert_parses("if x:\n\tpass");
            
            // Mix of tabs and spaces on different lines
            let mixed_source = "if x:\n    pass\nelse:\n\tpass";
            
            // We might expect this to fail in a real Python interpreter due to inconsistent indentation
            // But the parser might accept it depending on implementation
            let result = parse_code(mixed_source);
            
            // Just check that we handle it gracefully (either pass or fail consistently)
            if result.is_err() {
                assert_parse_fails(mixed_source);
            } else {
                assert_parses(mixed_source);
            }
        }

        #[test]
        fn test_extreme_whitespace() {
            // Code with excessive whitespace
            assert_parses("x   =   1   +   2   *   3");
            
            // Code with minimal whitespace
            assert_parses("x=1+2*3");
            
            // Line continuation with excessive whitespace
            assert_parses("x = \\\n      1 + \\\n      2");
            
            // Indentation with varying space counts
            assert_parses("if x:\n     pass  # 5 spaces\nelse:\n    pass   # 4 spaces");
            
            // Empty lines between code
            assert_parses("x = 1\n\n\n\ny = 2\n\n\nz = 3");
        }

        #[test]
        fn test_operator_chaining() {
            // Chained comparisons
            assert_parses("if 0 <= x < 10 <= y < 20 != z > 30: pass");
            
            // Complex chained comparisons
            assert_parses("if a < b > c <= d >= e == f != g is h is not i in j not in k: pass");
            
            // Chained assignment with operation
            assert_parses("x = y = z += 1");  // This should actually fail in Python
            
            // Extreme chaining with parentheses
            assert_parses("if (a < b) < (c > d) <= (e != f): pass");
        }
    }

    // 6. PYTHON VERSION-SPECIFIC FEATURES
    mod version_specific_features {
        use super::*;

        #[test]
        fn test_python_39_features() {
            // Dictionary union operator
            assert_parses("combined = dict1 | dict2");
            assert_parses("dict1 |= dict2");
            
            // Dictionary union with expressions
            assert_parses("result = {'a': 1, 'b': 2} | extra_dict | {'c': 3}");
            
            // Builtin generics
            assert_parses("values: list[int] = []");
            assert_parses("mapping: dict[str, tuple[int, float]] = {}");
            
            // Type annotations with PEP 585
            assert_parses("coords: list[tuple[int, int]] = [(1, 2), (3, 4)]");
        }

        #[test]
        fn test_python_310_features() {
            // Pattern matching (already tested in detail elsewhere)
            assert_parses(r#"
match command:
    case "quit":
        quit_app()
    case _:
        process(command)
            "#);
            
            // PEP 604 Union types
            assert_parses("def func(x: int | str | None): pass");
            
            // Parameter specification variables
            assert_parses(r#"
from typing import ParamSpec, Concatenate

P = ParamSpec('P')
def decorator(func: Callable[P, int]) -> Callable[P, str]: pass
            "#);
        }

        #[test]
        fn test_python_311_features() {
            // Exception group
            assert_parses(r#"
try:
    risky_operation()
except* NetworkError as e:
    handle_network_error(e)
except* (DiskError, MemoryError) as e:
    handle_resource_error(e)
            "#);
            
            // Self type reference
            assert_parses(r#"
from typing import Self

class Copyable:
    def copy(self) -> Self:
        return self.__class__()
            "#);
            
            // Arbitrary string literal as __match_args__
            assert_parses(r#"
class Point:
    __match_args__ = ("x", "y")
    
    def __init__(self, x, y):
        self.x = x
        self.y = y
            "#);
        }

        #[test]
        fn test_python_futures() {
            // from __future__ import annotations
            assert_parses("from __future__ import annotations");
            
            // Various __future__ imports
            assert_parses("from __future__ import division, absolute_import, print_function");
            
            // Forward references with __future__ annotations
            assert_parses(r#"
from __future__ import annotations

class Node:
    next: Node
    prev: Node | None
            "#);
        }

        #[test]
        fn test_python_type_system_features() {
            // TypeVars
            assert_parses("T = TypeVar('T')");
            assert_parses("T_co = TypeVar('T_co', covariant=True)");
            assert_parses("T_contra = TypeVar('T_contra', contravariant=True)");
            assert_parses("StrOrInt = TypeVar('StrOrInt', str, int)");
            
            // Protocol classes
            assert_parses(r#"
class Serializable(Protocol):
    def serialize(self) -> bytes: ...
            "#);
            
            // Literal types
            assert_parses("mode: Literal['r', 'w', 'a'] = 'r'");
            
            // Final annotations
            assert_parses("CONSTANT: Final[int] = 42");
            
            // TypedDict
            assert_parses(r#"
class Movie(TypedDict):
    title: str
    year: int
    rating: float
            "#);
        }
    }

    // 7. ADDITIONAL TEST CATEGORIES
    mod additional_tests {
        use super::*;

        #[test]
        fn test_unicode_in_comments() {
            // Unicode characters in comments
            assert_parses("x = 1  # πρφξ: Greek comment");
            assert_parses("y = 2  # 你好: Chinese comment");
            assert_parses("z = 3  # 😀😁😂😃: Emoji comment");
        }

        #[test]
        fn test_doc_strings() {
            // Function docstring
            assert_parses(r#"
def func():
    """This is a function docstring.
    
    It spans multiple lines and may contain:
    - Bullet points
    - Code examples:
        >>> func()
        Result
    - Unicode: πρφξ 你好 😀
    """
    pass
            "#);
            
            // Class docstring
            assert_parses(r#"
class MyClass:
    """Class docstring with triple double quotes."""
    
    def method(self):
        '''Method docstring with triple single quotes.'''
        pass
            "#);
            
            // Module docstring
            assert_parses(r#"
"""This is a module docstring.

It appears at the beginning of the file.
"""

import sys
            "#);
        }

        #[test]
        fn test_ellipsis() {
            // Ellipsis in various contexts
            assert_parses("x = ...");
            
            // Ellipsis in slices
            assert_parses("data[...]");
            assert_parses("data[..., 0]");
            assert_parses("data[0, ...]");
            
            // Ellipsis in type hints
            assert_parses("def func(x: Tuple[int, ...]) -> None: pass");
            
            // Ellipsis in class body
            assert_parses(r#"
class Interface:
    def method(self) -> None: ...
            "#);
        }

        #[test]
        fn test_arithmetic_corner_cases() {
            // Division by zero (syntax should be valid)
            assert_parses("x = 1 / 0");
            
            // Unary operations on literals
            assert_parses("x = -1");
            assert_parses("y = +1");
            assert_parses("z = ~1");
            
            // Extreme operator precedence combinations
            assert_parses("result = a ** b ** c | d & e << f >> g + h - i * j / k // l % m");
            
            // Edge case: negative zero
            assert_parses("x = -0.0");
            
            // Edge case: division precision
            assert_parses("x = 1 / 3");
        }

        #[test]
        fn test_line_continuation() {
            // Implicit line continuation within parentheses
            assert_parses(r#"
x = (1 +
     2 +
     3)
            "#);
            
            // Implicit line continuation within brackets
            assert_parses(r#"
x = [1,
     2,
     3]
            "#);
            
            // Implicit line continuation within braces
            assert_parses(r#"
x = {
    'a': 1,
    'b': 2
}
            "#);
            
            // Explicit line continuation with backslash
            assert_parses(r#"
x = 1 + \
    2 + \
    3
            "#);
            
            // Line continuation in string literals
            assert_parses(r#"
x = "This is a very long string literal " \
    "that spans multiple lines."
            "#);
        }

        #[test]
        fn test_walrus_operator_edge_cases() {
            // Walrus operator in different contexts
            assert_parses("if (n := len(items)) > 0: pass");
            
            // Walrus in tuple
            assert_parses("result = ((x := 1), x)");
            
            // Walrus in list comprehension
            assert_parses("[x for _ in range(10) if (x := random()) > 0.5]");
            
            // Nested walrus operators
            assert_parses("if (a := (b := (c := 1)) + 1) > 2: pass");
            
            // Walrus with other operators
            assert_parses("if (total := sum(values)) and (avg := total/len(values)) > threshold: pass");
        }
    }
}